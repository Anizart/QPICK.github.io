'use strict'

const empty = document.querySelector('.empty'),
      btnOrder = document.querySelector('.btn-order');

let products = JSON.parse(localStorage.getItem('products')) || [];

//+ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤:
if (products.length > 0) {
    empty.classList.add('delete-elem');
    btnOrder.classList.remove('delete-elem');
    showSards();
} else {
    empty.classList.remove('delete-elem');
    btnOrder.classList.add('delete-elem');
}

//? –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫:
const deleteCard = document.querySelectorAll('.cards__btn');

deleteCard.forEach(btn => btn.addEventListener('click', (e) => {
    const itemIndex = parseInt(e.target.getAttribute('data-index'), 10); // –û—Å–æ–±–µ–Ω–Ω–æ —Ç—É—Ç...

    // document.querySelector('.cards').classList.add('fade-out'); // —ç—Ç–æ –ø–æ—á–µ–º—É—Ç–æ –ª–æ–º–∞–µ—Ç
    
    // setTimeout(() => {
        products.splice(itemIndex, 1);
        localStorage.setItem('products', JSON.stringify(products));
        
        e.target.closest('.cards').remove();

        if (products.length === 0) {
            empty.classList.remove('delete-elem');
            btnOrder.classList.add('delete-elem');
        }

        updateCounter();
    // }, 500);
}));

//+ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç–æ—á–µ–∫:
function showSards() {
    products.forEach(product => {
        const cards = document.createElement('div'),
              trimmedText = trimToWord(product.productSrc, "img");
        cards.classList.add('cards');
        cards.innerHTML = `
            <div class="cards__card">
                <img src="../${trimmedText}" alt="–∫–∞—Ä—Ç–∏–Ω–∫–∞ —Ç–æ–≤–∞—Ä–∞" class="cards__img"></img>
                <div class="cards__description">–í—ã—Ä–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä: "${product.productName}"</div>
                <button class="cards__btn">–£–±—Ä–∞—Ç—å üóë</button>
            </div>
        `;
        document.querySelector('[data-container]').prepend(cards);
    });
}

//+ –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞:
function trimToWord(text, word) {    
    const wordIndex = text.indexOf(word);
    return wordIndex !== -1 ? text.substring(wordIndex) : text;
}